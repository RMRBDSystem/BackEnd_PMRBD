// <auto-generated />
using System;
using BusinessObject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BussinessObject.Migrations
{
    [DbContext(typeof(RmrbdContext))]
    partial class RmrbdContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccountRecipe", b =>
                {
                    b.Property<int>("AccountsAccountId")
                        .HasColumnType("int");

                    b.Property<int>("RecipesRecipeId")
                        .HasColumnType("int");

                    b.HasKey("AccountsAccountId", "RecipesRecipeId");

                    b.HasIndex("RecipesRecipeId");

                    b.ToTable("AccountRecipe");
                });

            modelBuilder.Entity("BusinessObject.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<int?>("AccountStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("Coin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("GoogleID");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("AccountId")
                        .HasName("PK__Account__349DA586628C74C8");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "GoogleId" }, "UQ__Account__A6FBF31B9019A517")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Account__A9D1053417B0D0A4")
                        .IsUnique();

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.AccountProfile", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackIdcard")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BackIDCard");

                    b.Property<int?>("CensorId")
                        .HasColumnType("int")
                        .HasColumnName("CensorID");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FrontIdcard")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FrontIDCard");

                    b.Property<string>("IdcardNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("IDCardNumber");

                    b.Property<string>("Portrait")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId")
                        .HasName("PK__AccountP__349DA58673F25A35");

                    b.HasIndex("CensorId");

                    b.HasIndex(new[] { "IdcardNumber" }, "UQ__AccountP__2CEB98360078DE47")
                        .IsUnique()
                        .HasFilter("[IDCardNumber] IS NOT NULL");

                    b.ToTable("AccountProfile", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int?>("CensorId")
                        .HasColumnType("int")
                        .HasColumnName("CensorID");

                    b.Property<int?>("CreateById")
                        .HasColumnType("int")
                        .HasColumnName("CreateByID");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Isbn")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ISBN");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("RequiredNote")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Required_Note");

                    b.Property<int?>("SenderAddressId")
                        .HasColumnType("int")
                        .HasColumnName("SenderAddressID");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("BookId")
                        .HasName("PK__Book__3DE0C227629A9559");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CensorId");

                    b.HasIndex("CreateById");

                    b.HasIndex("SenderAddressId");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.BookCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("CategoryId")
                        .HasName("PK__BookCate__19093A2BE1875784");

                    b.ToTable("BookCategory", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.BookOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int?>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    b.Property<int?>("ClientAddressId")
                        .HasColumnType("int")
                        .HasColumnName("ClientAddressID");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("OrderCode")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Order_Code");

                    b.Property<int?>("PaymentType")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PurchaseMethod")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal?>("ShipFee")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("OrderId");

                    b.HasIndex("BookId");

                    b.HasIndex("ClientAddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("BookOrder", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.BookOrderStatus", b =>
                {
                    b.Property<int>("BookOrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookOrderStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookOrderStatusId"));

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime");

                    b.HasKey("BookOrderStatusId")
                        .HasName("PK__BookOrde__967212521220FF6E");

                    b.HasIndex("OrderId");

                    b.ToTable("BookOrderStatus", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.BookRate", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    b.Property<int>("RatePoint")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "BookId")
                        .HasName("PK__BookRate__C770689A26ADE04F");

                    b.HasIndex("BookId");

                    b.ToTable("BookRate", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.BookShelf", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("EbookId")
                        .HasColumnType("int")
                        .HasColumnName("EBookID");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PurchasePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("RatePoint")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("CustomerId", "EbookId")
                        .HasName("PK__BookShel__536ED3E52AC1BCE2");

                    b.HasIndex("EbookId");

                    b.ToTable("BookShelf", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.BookTransaction", b =>
                {
                    b.Property<int>("BookTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookTransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookTransactionId"));

                    b.Property<int?>("CoinFluctuations")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MoneyFluctuations")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("BookTransactionId")
                        .HasName("PK__BookTran__4F2B2B26F32064C6");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("BookTransaction", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.CoinTransaction", b =>
                {
                    b.Property<int>("CoinTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CoinTransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoinTransactionId"));

                    b.Property<int?>("CoinFluctuations")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("MoneyFluctuations")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("CoinTransactionId")
                        .HasName("PK__CoinTran__610ECDE83A70CF87");

                    b.HasIndex("CustomerId");

                    b.ToTable("CoinTransaction", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int?>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    b.Property<string>("Content")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("EbookId")
                        .HasColumnType("int")
                        .HasColumnName("EBookID");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int")
                        .HasColumnName("RecipeID");

                    b.Property<int?>("RootCommentId")
                        .HasColumnType("int")
                        .HasColumnName("RootCommentID");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("CommentId")
                        .HasName("PK__Comment__C3B4DFAA801BC416");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EbookId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("RootCommentId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.CustomerAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<string>("AddressDetail")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("AddressStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("DistrictCode")
                        .HasColumnType("int")
                        .HasColumnName("District_Code");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PhoneNumberId")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceCode")
                        .HasColumnType("int")
                        .HasColumnName("Province_Code");

                    b.Property<int>("WardCode")
                        .HasColumnType("int")
                        .HasColumnName("Ward_Code");

                    b.HasKey("AddressId")
                        .HasName("PK__Customer__091C2A1B175C7F51");

                    b.HasIndex("AccountId");

                    b.ToTable("CustomerAddress", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Ebook", b =>
                {
                    b.Property<int>("EbookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EBookID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EbookId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int?>("CensorId")
                        .HasColumnType("int")
                        .HasColumnName("CensorID");

                    b.Property<int?>("CreateById")
                        .HasColumnType("int")
                        .HasColumnName("CreateByID");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EbookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EBookName");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImageURL");

                    b.Property<string>("Pdfurl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PDFUrl");

                    b.Property<int?>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("EbookId")
                        .HasName("PK__EBook__7C0B75DE78A5ACEF");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CensorId");

                    b.HasIndex("CreateById");

                    b.ToTable("EBook", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.EbookTransaction", b =>
                {
                    b.Property<int>("EbookTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EBookTransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EbookTransactionId"));

                    b.Property<int?>("CoinFluctuations")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EbookId")
                        .HasColumnType("int")
                        .HasColumnName("EBookID");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("EbookTransactionId")
                        .HasName("PK__EBookTra__1A9A10901E1B7544");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EbookId");

                    b.ToTable("EBookTransaction", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ImageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<int?>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImageURL");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int")
                        .HasColumnName("RecipeID");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("ImageId")
                        .HasName("PK__Image__7516F4EC1AE18B0A");

                    b.HasIndex("BookId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E32A078B7C7");

                    b.HasIndex("AccountId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.PersonalRecipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int")
                        .HasColumnName("RecipeID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Ingredient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfService")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Nutrition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PurchasePrice")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tutorial")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecipeId", "CustomerId")
                        .HasName("PK__Personal__67936E9BFA8C1025");

                    b.HasIndex("CustomerId");

                    b.ToTable("PersonalRecipe", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Recipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecipeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeId"));

                    b.Property<int?>("CensorId")
                        .HasColumnType("int")
                        .HasColumnName("CensorID");

                    b.Property<int?>("CreateById")
                        .HasColumnType("int")
                        .HasColumnName("CreateByID");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingredient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfService")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Nutrition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RecipeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TotalTime")
                        .HasColumnType("int");

                    b.Property<string>("Tutorial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecipeId")
                        .HasName("PK__Recipe__FDD988D0A98C78E3");

                    b.HasIndex("CensorId");

                    b.HasIndex("CreateById");

                    b.ToTable("Recipe", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.RecipeTransaction", b =>
                {
                    b.Property<int>("RecipeTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecipeTransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeTransactionId"));

                    b.Property<int?>("CoinFluctuations")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Detail")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int")
                        .HasColumnName("RecipeID");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("RecipeTransactionId")
                        .HasName("PK__RecipeTr__AD09EAF84D449249");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeTransaction", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__8AFACE3A8E1D1BE3");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.ServiceFeedback", b =>
                {
                    b.Property<int>("FeedBackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FeedBackID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedBackId"));

                    b.Property<string>("Content")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImageURL");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("FeedBackId")
                        .HasName("PK__Service___E2CB3867CB8D4277");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Service_Feedback", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TagId")
                        .HasName("PK__Tag__657CF9ACC8C9F18C");

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.RecipeRate", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int")
                        .HasColumnName("RecipeID");

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("RatePoint")
                        .HasColumnType("int");

                    b.HasKey("RecipeId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("RecipeRate", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.RecipeTag", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("RecipeId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("RecipeTag", (string)null);
                });

            modelBuilder.Entity("AccountRecipe", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountsAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesRecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObject.Models.Account", b =>
                {
                    b.HasOne("BusinessObject.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__Account__RoleID__412EB0B6");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObject.Models.AccountProfile", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithOne("AccountProfileAccount")
                        .HasForeignKey("BusinessObject.Models.AccountProfile", "AccountId")
                        .IsRequired()
                        .HasConstraintName("FK__AccountPr__Accou__44FF419A");

                    b.HasOne("BusinessObject.Models.Account", "Censor")
                        .WithMany("AccountProfileCensors")
                        .HasForeignKey("CensorId")
                        .HasConstraintName("FK__AccountPr__Censo__45F365D3");

                    b.Navigation("Account");

                    b.Navigation("Censor");
                });

            modelBuilder.Entity("BusinessObject.Models.Book", b =>
                {
                    b.HasOne("BusinessObject.Models.BookCategory", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__Book__CategoryID__09A971A2");

                    b.HasOne("BusinessObject.Models.Account", "Censor")
                        .WithMany("BookCensors")
                        .HasForeignKey("CensorId")
                        .HasConstraintName("FK__Book__CensorID__07C12930");

                    b.HasOne("BusinessObject.Models.Account", "CreateBy")
                        .WithMany("BookCreateBies")
                        .HasForeignKey("CreateById")
                        .HasConstraintName("FK__Book__CreateByID__08B54D69");

                    b.HasOne("BusinessObject.Models.CustomerAddress", "SenderAddress")
                        .WithMany("Books")
                        .HasForeignKey("SenderAddressId")
                        .HasConstraintName("FK__Book__SenderAddr__0A9D95DB");

                    b.Navigation("Category");

                    b.Navigation("Censor");

                    b.Navigation("CreateBy");

                    b.Navigation("SenderAddress");
                });

            modelBuilder.Entity("BusinessObject.Models.BookOrder", b =>
                {
                    b.HasOne("BusinessObject.Models.Book", "Book")
                        .WithMany("BookOrders")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK__BookOrder__BookI__160F4887");

                    b.HasOne("BusinessObject.Models.CustomerAddress", "ClientAddress")
                        .WithMany("BookOrders")
                        .HasForeignKey("ClientAddressId")
                        .HasConstraintName("FK__BookOrder__Clien__17F790F9");

                    b.HasOne("BusinessObject.Models.Account", "Customer")
                        .WithMany("BookOrders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__BookOrder__Custo__151B244E");

                    b.Navigation("Book");

                    b.Navigation("ClientAddress");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BusinessObject.Models.BookOrderStatus", b =>
                {
                    b.HasOne("BusinessObject.Models.BookOrder", "Order")
                        .WithMany("BookOrderStatuses")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__BookOrder__Order__1EA48E88");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BusinessObject.Models.BookRate", b =>
                {
                    b.HasOne("BusinessObject.Models.Book", "Book")
                        .WithMany("BookRates")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__BookRate__BookID__1BC821DD");

                    b.HasOne("BusinessObject.Models.Account", "Customer")
                        .WithMany("BookRates")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__BookRate__Custom__1AD3FDA4");

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BusinessObject.Models.BookShelf", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Customer")
                        .WithMany("BookShelves")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__BookShelf__Custo__7C4F7684");

                    b.HasOne("BusinessObject.Models.Ebook", "Ebook")
                        .WithMany("BookShelves")
                        .HasForeignKey("EbookId")
                        .IsRequired()
                        .HasConstraintName("FK__BookShelf__EBook__7D439ABD");

                    b.Navigation("Customer");

                    b.Navigation("Ebook");
                });

            modelBuilder.Entity("BusinessObject.Models.BookTransaction", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Customer")
                        .WithMany("BookTransactions")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__BookTrans__Custo__2180FB33");

                    b.HasOne("BusinessObject.Models.BookOrder", "Order")
                        .WithMany("BookTransactions")
                        .HasForeignKey("OrderId");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BusinessObject.Models.CoinTransaction", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Customer")
                        .WithMany("CoinTransactions")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__CoinTrans__Custo__6FE99F9F");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BusinessObject.Models.Comment", b =>
                {
                    b.HasOne("BusinessObject.Models.Book", "Book")
                        .WithMany("Comments")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK__Comment__BookID__282DF8C2");

                    b.HasOne("BusinessObject.Models.Account", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Comment__Custome__2A164134");

                    b.HasOne("BusinessObject.Models.Ebook", "Ebook")
                        .WithMany("Comments")
                        .HasForeignKey("EbookId")
                        .HasConstraintName("FK__Comment__EBookID__29221CFB");

                    b.HasOne("BusinessObject.Models.Recipe", "Recipe")
                        .WithMany("Comments")
                        .HasForeignKey("RecipeId")
                        .HasConstraintName("FK__Comment__RecipeI__2B0A656D");

                    b.HasOne("BusinessObject.Models.Comment", "RootComment")
                        .WithMany("InverseRootComment")
                        .HasForeignKey("RootCommentId")
                        .HasConstraintName("FK__Comment__RootCom__2645B050");

                    b.Navigation("Book");

                    b.Navigation("Customer");

                    b.Navigation("Ebook");

                    b.Navigation("Recipe");

                    b.Navigation("RootComment");
                });

            modelBuilder.Entity("BusinessObject.Models.CustomerAddress", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__CustomerA__Accou__4D94879B");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Models.Ebook", b =>
                {
                    b.HasOne("BusinessObject.Models.BookCategory", "Category")
                        .WithMany("Ebooks")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__EBook__CategoryI__797309D9");

                    b.HasOne("BusinessObject.Models.Account", "Censor")
                        .WithMany("EbookCensors")
                        .HasForeignKey("CensorId")
                        .HasConstraintName("FK__EBook__CensorID__787EE5A0");

                    b.HasOne("BusinessObject.Models.Account", "CreateBy")
                        .WithMany("EbookCreateBies")
                        .HasForeignKey("CreateById")
                        .HasConstraintName("FK__EBook__CreateByI__778AC167");

                    b.Navigation("Category");

                    b.Navigation("Censor");

                    b.Navigation("CreateBy");
                });

            modelBuilder.Entity("BusinessObject.Models.EbookTransaction", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Customer")
                        .WithMany("EbookTransactions")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__EBookTran__Custo__02084FDA");

                    b.HasOne("BusinessObject.Models.Ebook", "Ebook")
                        .WithMany("EbookTransactions")
                        .HasForeignKey("EbookId")
                        .HasConstraintName("FK__EBookTran__EBook__02FC7413");

                    b.Navigation("Customer");

                    b.Navigation("Ebook");
                });

            modelBuilder.Entity("BusinessObject.Models.Image", b =>
                {
                    b.HasOne("BusinessObject.Models.Book", "Book")
                        .WithMany("Images")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK__Image__BookID__0E6E26BF");

                    b.HasOne("BusinessObject.Models.Recipe", "Recipe")
                        .WithMany("Images")
                        .HasForeignKey("RecipeId")
                        .HasConstraintName("FK__Image__RecipeID__0D7A0286");

                    b.Navigation("Book");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("BusinessObject.Models.Notification", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__Notificat__Accou__52593CB8");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Models.PersonalRecipe", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany("PersonalRecipes")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__PersonalR__Custo__6754599E");

                    b.HasOne("BusinessObject.Models.Recipe", "Recipe")
                        .WithMany("PersonalRecipes")
                        .HasForeignKey("RecipeId")
                        .IsRequired()
                        .HasConstraintName("FK__PersonalR__Recip__66603565");

                    b.Navigation("Account");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("BusinessObject.Models.Recipe", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Censor")
                        .WithMany("RecipeCensors")
                        .HasForeignKey("CensorId")
                        .HasConstraintName("FK__Recipe__CensorID__5812160E");

                    b.HasOne("BusinessObject.Models.Account", "CreateBy")
                        .WithMany("RecipeCreateBies")
                        .HasForeignKey("CreateById")
                        .HasConstraintName("FK__Recipe__CreateBy__5629CD9C");

                    b.Navigation("Censor");

                    b.Navigation("CreateBy");
                });

            modelBuilder.Entity("BusinessObject.Models.RecipeTransaction", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Customer")
                        .WithMany("RecipeTransactions")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__RecipeTra__Custo__6B24EA82");

                    b.HasOne("BusinessObject.Models.Recipe", "Recipe")
                        .WithMany("RecipeTransactions")
                        .HasForeignKey("RecipeId")
                        .HasConstraintName("FK__RecipeTra__Recip__6C190EBB");

                    b.Navigation("Customer");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("BusinessObject.Models.ServiceFeedback", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Customer")
                        .WithMany("ServiceFeedbackCustomers")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Service_F__Custo__6383C8BA");

                    b.HasOne("BusinessObject.Models.Account", "Employee")
                        .WithMany("ServiceFeedbackEmployees")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__Service_F__Emplo__628FA481");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BussinessObject.Models.RecipeRate", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany("RecipeRates")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Recipe", "Recipe")
                        .WithMany("RecipeRates")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("BussinessObject.Models.RecipeTag", b =>
                {
                    b.HasOne("BusinessObject.Models.Recipe", "Recipe")
                        .WithMany("RecipeTags")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Tag", "Tag")
                        .WithMany("RecipeTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BusinessObject.Models.Account", b =>
                {
                    b.Navigation("AccountProfileAccount");

                    b.Navigation("AccountProfileCensors");

                    b.Navigation("BookCensors");

                    b.Navigation("BookCreateBies");

                    b.Navigation("BookOrders");

                    b.Navigation("BookRates");

                    b.Navigation("BookShelves");

                    b.Navigation("BookTransactions");

                    b.Navigation("CoinTransactions");

                    b.Navigation("Comments");

                    b.Navigation("CustomerAddresses");

                    b.Navigation("EbookCensors");

                    b.Navigation("EbookCreateBies");

                    b.Navigation("EbookTransactions");

                    b.Navigation("Notifications");

                    b.Navigation("PersonalRecipes");

                    b.Navigation("RecipeCensors");

                    b.Navigation("RecipeCreateBies");

                    b.Navigation("RecipeRates");

                    b.Navigation("RecipeTransactions");

                    b.Navigation("ServiceFeedbackCustomers");

                    b.Navigation("ServiceFeedbackEmployees");
                });

            modelBuilder.Entity("BusinessObject.Models.Book", b =>
                {
                    b.Navigation("BookOrders");

                    b.Navigation("BookRates");

                    b.Navigation("Comments");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("BusinessObject.Models.BookCategory", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Ebooks");
                });

            modelBuilder.Entity("BusinessObject.Models.BookOrder", b =>
                {
                    b.Navigation("BookOrderStatuses");

                    b.Navigation("BookTransactions");
                });

            modelBuilder.Entity("BusinessObject.Models.Comment", b =>
                {
                    b.Navigation("InverseRootComment");
                });

            modelBuilder.Entity("BusinessObject.Models.CustomerAddress", b =>
                {
                    b.Navigation("BookOrders");

                    b.Navigation("Books");
                });

            modelBuilder.Entity("BusinessObject.Models.Ebook", b =>
                {
                    b.Navigation("BookShelves");

                    b.Navigation("Comments");

                    b.Navigation("EbookTransactions");
                });

            modelBuilder.Entity("BusinessObject.Models.Recipe", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("PersonalRecipes");

                    b.Navigation("RecipeRates");

                    b.Navigation("RecipeTags");

                    b.Navigation("RecipeTransactions");
                });

            modelBuilder.Entity("BusinessObject.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BusinessObject.Models.Tag", b =>
                {
                    b.Navigation("RecipeTags");
                });
#pragma warning restore 612, 618
        }
    }
}

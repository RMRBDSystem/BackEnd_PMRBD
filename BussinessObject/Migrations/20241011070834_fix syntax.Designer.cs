// <auto-generated />
using System;
using BusinessObject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BussinessObject.Migrations
{
    [DbContext(typeof(RmrbdContext))]
    [Migration("20241011070834_fix syntax")]
    partial class fixsyntax
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("BookName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int?>("CensorId")
                        .HasColumnType("int")
                        .HasColumnName("CensorID");

                    b.Property<int?>("CreateById")
                        .HasColumnType("int")
                        .HasColumnName("CreateByID");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Isbn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ISBN");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int?>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Required_note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UnitInStock")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CensorId");

                    b.HasIndex("CreateById");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.BookCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("CategoryId");

                    b.ToTable("BookCategory", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.BookOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("District_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PurchaseMethod")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("ShipFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Ward_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.ToTable("BookOrder", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.BookRate", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    b.Property<int?>("RatePoint")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookRate", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.BookShelf", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("EbookId")
                        .HasColumnType("int")
                        .HasColumnName("EBookID");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PurchasePrice")
                        .HasColumnType("int");

                    b.Property<int?>("RatePoint")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "EbookId");

                    b.HasIndex("EbookId");

                    b.ToTable("BookShelf", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.CoinTransaction", b =>
                {
                    b.Property<int>("CoinTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CoinTransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoinTransactionId"));

                    b.Property<int?>("CoinFluctuations")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MoneyFluctuations")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("CoinTransactionId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CoinTransaction", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int?>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("EbookId")
                        .HasColumnType("int")
                        .HasColumnName("EBookID");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int")
                        .HasColumnName("RecipeID");

                    b.Property<int?>("RootCommentId")
                        .HasColumnType("int")
                        .HasColumnName("RootCommentID");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EbookId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("RootCommentId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<int?>("AccountStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackIdcard")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BackIDCard");

                    b.Property<int?>("CensorId")
                        .HasColumnType("int")
                        .HasColumnName("CensorID");

                    b.Property<int>("Coin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("District_code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FrontIdcard")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FrontIDCard");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IdcardNumber")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("IDCardNumber");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Portrait")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province_code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("SellerStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ShopAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ward_code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("CustomerId");

                    b.HasIndex("CensorId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GoogleId")
                        .IsUnique();

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Ebook", b =>
                {
                    b.Property<int>("EbookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EBookID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EbookId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int?>("CensorId")
                        .HasColumnType("int")
                        .HasColumnName("CensorID");

                    b.Property<int?>("CreateById")
                        .HasColumnType("int")
                        .HasColumnName("CreateByID");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EbookName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EBookName");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImageURL");

                    b.Property<string>("Pdfurl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PDFUrl");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("EbookId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CensorId");

                    b.HasIndex("CreateById");

                    b.ToTable("EBook", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackIdcard")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BackIDCard");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EmployeeTypeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeTypeID");

                    b.Property<string>("FrontIdcard")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FrontIDCard");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdcardNumBer")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("IDCardNumBer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Portrait")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("EmployeeId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("EmployeeTypeId");

                    b.HasIndex("GoogleId")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Employee__A9D10534EB410196")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.EmployeeType", b =>
                {
                    b.Property<int>("EmployeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeTypeId"));

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeTypeId");

                    b.ToTable("EmployeeType", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ImageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<int?>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImageURL");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int")
                        .HasColumnName("RecipeID");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("ImageId");

                    b.HasIndex("BookId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.PersonalRecipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int")
                        .HasColumnName("RecipeID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Ingredient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfService")
                        .HasColumnType("int");

                    b.Property<string>("Nutrition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PurchasePrice")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tutorial")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecipeId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("PersonalRecipe", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Recipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecipeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeId"));

                    b.Property<int?>("CensorId")
                        .HasColumnType("int")
                        .HasColumnName("CensorID");

                    b.Property<int?>("CreateById")
                        .HasColumnType("int")
                        .HasColumnName("CreateByID");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingredient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfService")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Nutrition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RecipeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((-1))");

                    b.Property<int?>("TotalTime")
                        .HasColumnType("int");

                    b.Property<string>("Tutorial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecipeId");

                    b.HasIndex("CensorId");

                    b.HasIndex("CreateById");

                    b.ToTable("Recipe", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.RecipeRate", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int")
                        .HasColumnName("RecipeID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int?>("RatePoint")
                        .HasColumnType("int");

                    b.HasKey("RecipeId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Recipe_Rate", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.ServiceFeedBack", b =>
                {
                    b.Property<int>("FeedBackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FeedBackID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedBackId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImageURL");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeedBackId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ServiceFeedBack", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.BookOrderStatus", b =>
                {
                    b.Property<int>("BookOrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookOrderStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookOrderStatusId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BookOrderStatusId");

                    b.HasIndex("OrderId");

                    b.ToTable("BookOrderStatus", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.BookTransaction", b =>
                {
                    b.Property<int>("BookTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookTransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookTransactionId"));

                    b.Property<int?>("CoinFluctuations")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MoneyFluctuations")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("BookOrderID");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("BookTransactionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("BookTransaction", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.EbookTransaction", b =>
                {
                    b.Property<int>("EbookTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EbookTransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EbookTransactionId"));

                    b.Property<int>("CoinFluctuations")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EbookId")
                        .HasColumnType("int")
                        .HasColumnName("EBookID");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("EbookTransactionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EbookId");

                    b.ToTable("EbookTransaction", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.RecipeTag", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("RecipeId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("RecipeTag", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.RecipeTransaction", b =>
                {
                    b.Property<int>("RecipeTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecipeTransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeTransactionId"));

                    b.Property<int>("CoinFluctuations")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int")
                        .HasColumnName("RecipeID");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("RecipeTransactionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeTransaction", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Book", b =>
                {
                    b.HasOne("BusinessObject.Models.BookCategory", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__Book__CategoryID__03F0984C");

                    b.HasOne("BusinessObject.Models.Employee", "Censor")
                        .WithMany("Books")
                        .HasForeignKey("CensorId")
                        .HasConstraintName("FK__Book__CensorID__02084FDA");

                    b.HasOne("BusinessObject.Models.Customer", "CreateBy")
                        .WithMany("Books")
                        .HasForeignKey("CreateById")
                        .HasConstraintName("FK__Book__CreateByID__02FC7413");

                    b.Navigation("Category");

                    b.Navigation("Censor");

                    b.Navigation("CreateBy");
                });

            modelBuilder.Entity("BusinessObject.Models.BookOrder", b =>
                {
                    b.HasOne("BusinessObject.Models.Book", "Book")
                        .WithMany("BookOrder")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__BookOrder__BookI__0F624AF8");

                    b.HasOne("BusinessObject.Models.Customer", "Customer")
                        .WithMany("BookOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__BookOrder__Custo__0B91BA14");

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BusinessObject.Models.BookRate", b =>
                {
                    b.HasOne("BusinessObject.Models.Book", "Book")
                        .WithMany("BookRates")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__BookRate__BookID__08B54D69");

                    b.HasOne("BusinessObject.Models.Customer", "Customer")
                        .WithMany("BookRates")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__BookRate__Custom__07C12930");

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BusinessObject.Models.BookShelf", b =>
                {
                    b.HasOne("BusinessObject.Models.Customer", "Customer")
                        .WithMany("BookShelves")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__BookShelf__Custo__7D439ABD");

                    b.HasOne("BusinessObject.Models.Ebook", "Ebook")
                        .WithMany("BookShelves")
                        .HasForeignKey("EbookId")
                        .IsRequired()
                        .HasConstraintName("FK__BookShelf__EBook__7E37BEF6");

                    b.Navigation("Customer");

                    b.Navigation("Ebook");
                });

            modelBuilder.Entity("BusinessObject.Models.CoinTransaction", b =>
                {
                    b.HasOne("BusinessObject.Models.Customer", "Customer")
                        .WithMany("CoinTransactions")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BusinessObject.Models.Comment", b =>
                {
                    b.HasOne("BusinessObject.Models.Book", "Book")
                        .WithMany("Comments")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK__Comment__BookID__1332DBDC");

                    b.HasOne("BusinessObject.Models.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Comment__Custome__151B244E");

                    b.HasOne("BusinessObject.Models.Ebook", "Ebook")
                        .WithMany("Comments")
                        .HasForeignKey("EbookId")
                        .HasConstraintName("FK__Comment__EBookID__14270015");

                    b.HasOne("BusinessObject.Models.Recipe", "Recipe")
                        .WithMany("Comments")
                        .HasForeignKey("RecipeId")
                        .HasConstraintName("FK__Comment__RecipeI__160F4887");

                    b.HasOne("BusinessObject.Models.Comment", "RootComment")
                        .WithMany("InverseRootComment")
                        .HasForeignKey("RootCommentId")
                        .HasConstraintName("FK__Comment__RootCom__123EB7A3");

                    b.Navigation("Book");

                    b.Navigation("Customer");

                    b.Navigation("Ebook");

                    b.Navigation("Recipe");

                    b.Navigation("RootComment");
                });

            modelBuilder.Entity("BusinessObject.Models.Customer", b =>
                {
                    b.HasOne("BusinessObject.Models.Employee", "Censor")
                        .WithMany("Customers")
                        .HasForeignKey("CensorId")
                        .HasConstraintName("FK__Customer__Censor__5812160E");

                    b.Navigation("Censor");
                });

            modelBuilder.Entity("BusinessObject.Models.Ebook", b =>
                {
                    b.HasOne("BusinessObject.Models.BookCategory", "Category")
                        .WithMany("Ebooks")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__EBook__CategoryI__7A672E12");

                    b.HasOne("BusinessObject.Models.Employee", "Censor")
                        .WithMany("Ebooks")
                        .HasForeignKey("CensorId")
                        .HasConstraintName("FK__EBook__CensorID__787EE5A0");

                    b.HasOne("BusinessObject.Models.Customer", "CreateBy")
                        .WithMany("Ebooks")
                        .HasForeignKey("CreateById")
                        .HasConstraintName("FK__EBook__CreateByI__797309D9");

                    b.Navigation("Category");

                    b.Navigation("Censor");

                    b.Navigation("CreateBy");
                });

            modelBuilder.Entity("BusinessObject.Models.Employee", b =>
                {
                    b.HasOne("BusinessObject.Models.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Employee__Employ__5165187F");

                    b.Navigation("EmployeeType");
                });

            modelBuilder.Entity("BusinessObject.Models.Image", b =>
                {
                    b.HasOne("BusinessObject.Models.Book", "Book")
                        .WithMany("Images")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK__Image__BookID__19DFD96B");

                    b.HasOne("BusinessObject.Models.Recipe", "Recipe")
                        .WithMany("Images")
                        .HasForeignKey("RecipeId")
                        .HasConstraintName("FK__Image__RecipeID__18EBB532");

                    b.Navigation("Book");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("BusinessObject.Models.Notification", b =>
                {
                    b.HasOne("BusinessObject.Models.Customer", "Customer")
                        .WithMany("Notifications")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Notificat__Custo__6EF57B66");

                    b.HasOne("BusinessObject.Models.Employee", "Employee")
                        .WithMany("Notifications")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__Notificat__Emplo__6E01572D");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BusinessObject.Models.PersonalRecipe", b =>
                {
                    b.HasOne("BusinessObject.Models.Customer", "Customer")
                        .WithMany("PersonalRecipes")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__PersonalR__Custo__72C60C4A");

                    b.HasOne("BusinessObject.Models.Recipe", "Recipe")
                        .WithMany("PersonalRecipes")
                        .HasForeignKey("RecipeId")
                        .IsRequired()
                        .HasConstraintName("FK__PersonalR__Recip__71D1E811");

                    b.Navigation("Customer");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("BusinessObject.Models.Recipe", b =>
                {
                    b.HasOne("BusinessObject.Models.Employee", "Censor")
                        .WithMany("Recipes")
                        .HasForeignKey("CensorId")
                        .HasConstraintName("FK__Recipe__CensorID__6383C8BA");

                    b.HasOne("BusinessObject.Models.Customer", "CreateBy")
                        .WithMany("Recipes")
                        .HasForeignKey("CreateById")
                        .HasConstraintName("FK__Recipe__CreateBy__60A75C0F");

                    b.Navigation("Censor");

                    b.Navigation("CreateBy");
                });

            modelBuilder.Entity("BusinessObject.Models.RecipeRate", b =>
                {
                    b.HasOne("BusinessObject.Models.Customer", "Customer")
                        .WithMany("RecipeRates")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Recipe_Ra__Custo__6B24EA82");

                    b.HasOne("BusinessObject.Models.Recipe", "Recipe")
                        .WithMany("RecipeRates")
                        .HasForeignKey("RecipeId")
                        .IsRequired()
                        .HasConstraintName("FK__Recipe_Ra__Recip__6A30C649");

                    b.Navigation("Customer");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("BusinessObject.Models.ServiceFeedBack", b =>
                {
                    b.HasOne("BusinessObject.Models.Customer", "Customer")
                        .WithMany("ServiceFeedBacks")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__ServiceFe__Custo__5CD6CB2B");

                    b.HasOne("BusinessObject.Models.Employee", "Employee")
                        .WithMany("ServiceFeedBacks")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__ServiceFe__Emplo__5BE2A6F2");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BussinessObject.Models.BookOrderStatus", b =>
                {
                    b.HasOne("BusinessObject.Models.BookOrder", "BookOrder")
                        .WithMany("BookOrderStatuses")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookOrder");
                });

            modelBuilder.Entity("BussinessObject.Models.BookTransaction", b =>
                {
                    b.HasOne("BusinessObject.Models.Customer", "Customer")
                        .WithMany("BookTransactions")
                        .HasForeignKey("CustomerId");

                    b.HasOne("BusinessObject.Models.BookOrder", "BookOrder")
                        .WithMany("BookTransactions")
                        .HasForeignKey("OrderId");

                    b.Navigation("BookOrder");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BussinessObject.Models.EbookTransaction", b =>
                {
                    b.HasOne("BusinessObject.Models.Customer", "Customer")
                        .WithMany("EbookTransactions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Ebook", "Ebook")
                        .WithMany("EbookTransactions")
                        .HasForeignKey("EbookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Ebook");
                });

            modelBuilder.Entity("BussinessObject.Models.RecipeTag", b =>
                {
                    b.HasOne("BusinessObject.Models.Recipe", "Recipe")
                        .WithMany("RecipeTags")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Tag", "Tag")
                        .WithMany("RecipeTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BussinessObject.Models.RecipeTransaction", b =>
                {
                    b.HasOne("BusinessObject.Models.Customer", "Customer")
                        .WithMany("RecipeTransactions")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Transacti__Custo__1CBC4616");

                    b.HasOne("BusinessObject.Models.Recipe", "Recipe")
                        .WithMany("RecipeTransactions")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Transacti__Recip__1DB06A4F");

                    b.Navigation("Customer");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("BusinessObject.Models.Book", b =>
                {
                    b.Navigation("BookOrder");

                    b.Navigation("BookRates");

                    b.Navigation("Comments");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("BusinessObject.Models.BookCategory", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Ebooks");
                });

            modelBuilder.Entity("BusinessObject.Models.BookOrder", b =>
                {
                    b.Navigation("BookOrderStatuses");

                    b.Navigation("BookTransactions");
                });

            modelBuilder.Entity("BusinessObject.Models.Comment", b =>
                {
                    b.Navigation("InverseRootComment");
                });

            modelBuilder.Entity("BusinessObject.Models.Customer", b =>
                {
                    b.Navigation("BookOrders");

                    b.Navigation("BookRates");

                    b.Navigation("BookShelves");

                    b.Navigation("BookTransactions");

                    b.Navigation("Books");

                    b.Navigation("CoinTransactions");

                    b.Navigation("Comments");

                    b.Navigation("EbookTransactions");

                    b.Navigation("Ebooks");

                    b.Navigation("Notifications");

                    b.Navigation("PersonalRecipes");

                    b.Navigation("RecipeRates");

                    b.Navigation("RecipeTransactions");

                    b.Navigation("Recipes");

                    b.Navigation("ServiceFeedBacks");
                });

            modelBuilder.Entity("BusinessObject.Models.Ebook", b =>
                {
                    b.Navigation("BookShelves");

                    b.Navigation("Comments");

                    b.Navigation("EbookTransactions");
                });

            modelBuilder.Entity("BusinessObject.Models.Employee", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Customers");

                    b.Navigation("Ebooks");

                    b.Navigation("Notifications");

                    b.Navigation("Recipes");

                    b.Navigation("ServiceFeedBacks");
                });

            modelBuilder.Entity("BusinessObject.Models.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("BusinessObject.Models.Recipe", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("PersonalRecipes");

                    b.Navigation("RecipeRates");

                    b.Navigation("RecipeTags");

                    b.Navigation("RecipeTransactions");
                });

            modelBuilder.Entity("BusinessObject.Models.Tag", b =>
                {
                    b.Navigation("RecipeTags");
                });
#pragma warning restore 612, 618
        }
    }
}
